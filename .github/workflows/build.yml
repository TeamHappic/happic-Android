name: Android Build
on:
  push:
    branches:
      - develop
defaults:
  run:
    shell: bash
    working-directory: .

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build
    if: "!startsWith(github.event.head_commit.message, '[release]') && !startsWith(github.ref, 'refs/tags/')"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ref: 'develop'

      - name: Gradle cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      #      - uses: actions/setup-java@v1
      #        with:
      #          java-version: '1.8'

      - name: Sync version.properties file to env
        run: |
          echo "$(cat ./version.properties | sed 's/#.*//g' | xargs | tr ' ' '\n')" >> $GITHUB_ENV



#      - name: Increase Version
#        run: |
#          increase_version() {
#            local delimiter=.
#            local array=($(echo "$1" | tr $delimiter '\n'))
#            array[$2]=$((array[$2]+1))
#            echo $(local IFS=$delimiter ; echo "${array[*]}")
#          }
#          VERSION_NAME=$(increase_version $VERSION_NAME 1)
#          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
#          VERSION_CODE=$(increase_version $VERSION_CODE 0)
#          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV
#          VERSION=$VERSION_NAME
#          VERSION+='('
#          VERSION+=$VERSION_CODE
#          VERSION+=')'
#          echo "VERSION=$VERSION" >> $GITHUB_ENV
#
#      - name: List After
#        run: |
#          rm version.properties
#          touch version.properties
#          echo "VERSION_NAME=${VERSION_NAME}" >> version.properties
#          echo "VERSION_CODE=${VERSION_CODE}" >> version.properties
#          cat version.properties
#
#      - uses: stefanzweifel/git-auto-commit-action@v4
#        with:
#          branch: develop
#          commit_message: "[release] ${{ env.VERSION }}"
#          tagging_message: "${{ env.VERSION }}"
#          commit_user_name: Release Bot
#          commit_user_email: mym0404@gmail.com
#
#      - name: Checkout repository
#        uses: actions/checkout@v2
#        with:
#          ref: 'develop'

      - name: Decode firebase config
        run: touch ./app/google-services.json && echo ${{ secrets.GOOGLE_SERVICE_JSON }} | base64 -di > ./app/google-services.json

#      - name: LS
#        run: cat ./app/google-services.json


      - name: Build Release
        run: ./gradlew assembleRelease

      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          path: app/build/outputs

      - name: Update Release apk name
        if: ${{ success() }}
        run: |
          mv app/build/outputs/apk/release/app-release.apk happic_release.apk
          echo 'apk=happic_release.apk' >> $GITHUB_ENV

      - name: LS
        run: echo $apk

      - name: Upload APK
        if: ${{ success() }}
        run: |
          curl -X POST \
          -F file=@$apk \
          -F channels=${{secrets.SLACK_CHANNEL_ID}} \
          -H "Authorization: Bearer ${{secrets.SLACK_BOT_API_TOKEN}}" \
          https://slack.com/api/files.upload

      - name: On success, Notify with Slack
        if: ${{ success() }}
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_ANDROID }}
          SLACK_TITLE: 'Android Release Success ✅'
          MSG_MINIMAL: true
          SLACK_MESSAGE: 'Download release APK! `${{ env.VERSION_NAME }}(${{ env.VERSION_CODE }})`'
      - name: On fail, Notify with Slack
        if: ${{ failure() }}
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_ANDROID }}
          SLACK_TITLE: 'Android Build Failed ❌'
          MSG_MINIMAL: false
          SLACK_MESSAGE: 'Check what is going on `${{ env.VERSION_NAME }}(${{ env.VERSION_CODE }})`'
